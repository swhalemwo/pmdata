* documentation for PMDATA package
:PROPERTIES:
:ID:       37bd52f7-0d38-4b36-beb2-86d17a5ca795
:END:

** PMDB

#+begin_src dot :file pmdb_flow.png
digraph D {
  node[shape = "record"]
  PMDB -> gd_pmdb_excl
  gd_pmdb_excl -> gd_pmdb



  gd_pmdb -> t_gwd_pmdb_founder_person
  PMDB_FOUNDER_PERSON_FILE -> t_gwd_pmdb_founder_person[label="checks coverage"]
  t_gwd_pmdb_founder_person -> PMDB_FOUNDER_PERSON_FILE[label="writes once"]

  manually_split_couples -> PMDB_FOUNDER_PERSON_FILE
  manually_check_for_name_overlap -> PMDB_PPECPRN_FILE

  PMDB_FOUNDER_PERSON_FILE -> t_pmdb_founder_name_change
  gd_pmdb -> t_pmdb_founder_name_change

  // PMDB_PPECPRN_FILE -> gd_pmdb_founder_person
  // PMDB_FOUNDER_PERSON_FILE -> gd_pmdb_founder_person
  
  // PMDB_FOUNDER_PERSON_FILE -> t_gwd_ppecprn

  // PMDB_PPECPRN_FILE -> t_gwd_pmdb_ppecprn[label="checks coverage", force=0]
  // for some reason need dir back here to get proper order..
  t_subset -> t_gwd_ppecprn
  t_gwd_ppecprn -> PMDB_PPECPRN_FILE[label="writes once"]
  t_gwd_ppecprn -> PMDB_PPECPRN_FILE[dir = "back", label="checks coverage"]
  

  gd_pmdb_founder_person -> gd_pmdb_person

  PMDB_PPECPRN_FILE -> t_gwd_pmdb_founder_person_wid

  PMDB_FOUNDER_PERSON_FILE -> t_gwd_pmdb_founder_person_wid
  t_gwd_pmdb_founder_person_wid -> PMDB_FOUNDER_PERSON_FILE_WID[label="writes once"]
  PMDB_FOUNDER_PERSON_FILE_WID -> t_gwd_pmdb_founder_person_wid[label="checks identity"]

  PMDB_FOUNDER_PERSON_FILE_WID -> gd_pmdb_founder_person

  t_gwd_ppecprn -> PMDB_FOUNDER_PERSON_FILE_WID[dir=back,weight = 2]


}
#+end_src

#+RESULTS:
[[file:pmdb_flow.png]]

[[file:pmdb_flow.png]]

~gd_pmdb_excl~ and ~gd_pmdb~ process and run all kinds of test on the PMDB.csv file downloaded from google sheets. Outcome is dt_pmdb (1 row per museum) which serves as the basis for links to various other data sources, such as those  related to founder (founder_id), coordinates (lat/long), country (iso3c) and/or year (year).

*** updating pmdata files after PMDB has been updated

~pmdata~ includes a number of files to make sure data (museums, collectors) can be straightforwardly combined with other datasets; failure to do so will result in failure at package build time. 

In particular, if there are new museums entries, MOW inclusion needs to be checked (~gw_mow_pmdb_matches~, in ~match_pmdb_mow.R~)

if there are new collector entries, they have to be: 
- added to ~PMDB_FOUNDER_PERSON_FILE~ and ~PDMB_FOUNDER_PERSON_FILE_WID~ (tests will print entries to be added)
- checked for artnews collector ranking inclusion (with ~gw_artnews_pmdb_matches~)


*** distances between private museums
distances between private museums can be generated via `gd_pmdb_proxcnt`.

** Artnews

*** flowchart
:PROPERTIES:
:ID:       ca94a076-c5ad-481c-826d-6663c08be525
:END:
#+begin_src dot :file artnews_sketch.png
digraph D {
  node [shape = "box"];
  // splines = false;
  compound = true;

  subgraph cluster_scraping {
    label = "scraping"
    artnews_scraping_all -> selenium
    artnews_scraping_genre -> selenium2
    
  }

  subgraph cluster_parsing {
    label = "parsing"
    selenium -> artnews_parsing_all
    selenium2 -> artnews_parsing_genre
    artnews_parsing_all -> ranking_all
    ranking_all[label="ranking.csv"]
    artnews_parsing_genre -> ranking_genre
    ranking_genre[label="ranking_genre.csv"]
  }


  subgraph cluster_preprocessing {
    label = "pre-processing";

    t_gwd_artnews_clctr
    t_gwd_artnews_collector_person
    collector_person_file
    artnews_apecprn_file[label="artnews_apecprn_file"]

    manually_check_couple -> collector_entries_file
    collector_entries_file -> t_gwd_artnews_clctr[label="checks coverage"]

    manually_split_couples -> collector_person_file

    t_gwd_artnews_clctr -> collector_entries_file[label="WRITES ONCE"]
    ranking_all -> t_gwd_artnews_clctr

    collector_entries_file -> t_gwd_artnews_collector_person
    t_gwd_artnews_collector_person -> collector_person_file[label="WRITES ONCE"]
    collector_person_file -> t_gwd_artnews_collector_person[label="checks coverage"]

    manually_check_for_name_overlap -> artnews_apecprn_file

    t_subset -> t_gwd_apecprn
    // collector_person_file -> t_gwd_apecprn
    
    t_gwd_apecprn -> artnews_apecprn_file[label="WRITES ONCE"]
    artnews_apecprn_file -> t_gwd_apecprn[label="checks coverage"]


    collector_person_file -> t_gwd_artnews_collector_wid
    t_gwd_artnews_collector_wid -> artnews_collector_person_file_wid[label="writes once"]
    artnews_collector_person_file_wid -> t_gwd_artnews_collector_wid[label="checks identity"]

    t_gwd_apecprn -> artnews_collector_person_file_wid [dir=back,label="input"]


    artnews_apecprn_file -> t_gwd_artnews_collector_wid
    t_gwd_artnews_collector_wid -> gd_artnews_collector_person



    gd_artnews_collector_person -> gd_artnews_person

    
}

ARTNEWS_LOCTABLE_FILE

ranking_all -> readin_artnews_all
ranking_genre -> generate_artnews_data
readin_artnews_all -> generate_artnews_data

subgraph cluster_location {
  label = "location"
  manually_standardize_locations -> ARTNEWS_LOCTABLE_FILE
  ARTNEWS_LOCTABLE_FILE -> t_gd_artnews_location_FIXME
  ranking_all -> t_gd_artnews_location_FIXME
}

subgraph cluster_matching {
  label =  "matching to PMDB"
  
  gd_artnews_person -> gwl_artnews_clctrs_tomatch
  t_gd_artnews_location_FIXME -> gwl_artnews_clctrs_tomatch
  gd_artnews_collector_person-> gwl_artnews_clctrs_tomatch

  artnews_persons_el[label="artnews-persons.el"]

  gwl_artnews_clctrs_tomatch -> artnews_persons_el
  artnews_persons_el -> gw_artnews_pmdb_matches
  artnews_persons_el -> manually_check_pmdb_AN_match
  manually_check_pmdb_AN_match -> ARTNEWS_PMDB_MATCHRES_FILE
  gw_artnews_pmdb_matches -> ARTNEWS_PMDB_MATCHRES_FILE

  ARTNEWS_PMDB_MATCHRES_FILE -> t_pmdb_artnews_match_coverage
  dt_pmdb -> t_pmdb_artnews_match_coverage
  dt_pmdb -> gw_artnews_pmdb_matches


  // artnews_collector_person_file_wid -> gwl_artnews_clctrs_tomatch
  
  //  ARTNEWS_LOCTABLE_FILE -> gwl_artnews_clctrs_tomatch
}

}
#+end_src  

#+RESULTS:
[[file:artnews_sketch.png]]


[[file:artnews_sketch.png]]

*** table relations
:PROPERTIES:
:ID:       9e444429-0574-45e9-aa4c-485c8a03b0d5
:END:
#+begin_src dot :file artnews_data_structure.png
digraph D {
  rankdir = "LR"
  node[shape = "record"]

  AN_time [
	   label = "<f0> AN_time | <f1> position | <name> name | <ID_ACE> an_clctr_entry | year |  around 8k"
	   ];


  AN_collectors [
	   label = "<f0> AN_collectors| <name> name | <ID> an_clctr_entry | is_couple? | around 900"
	   ];

  // like AN_collectors, but with couples split up
  AN_collector_persons [
	label = "AN_collector_person | name | <ID_ACPE> ACPE | <ID_ACE> an_cltr_entry | <ID_APE> ID_APE
	| around 1200"];

  
  // persons are now unique: in AN_collector_persons, the same person can be part of different collectors
  // e.g. once on her own, once as part of couple
  AN_person [
	   label = "<f0> AN_person | <f1> name | <ID_ACPE> an_clctr_person_entry | <ID_person> an_person_entry |
	   around 1100"
	   ];

  PMDB_museums [
		label = "<f1> PMDB_museums |  museum_name | <founder_name> founder_name | <founder_id> founder_id
		| around 450"
		];

  PMDB_founders [
		 label = "PMDB_founders | <founder_id> founder_id | is_couple | around 400"]


  PMDB_persons [
		   label = "PMDB_persons | name | <pmdb_person_id>pmdb_person_id | around 700 "
		   ]

  // this table is necessary because of couples and multiple founders, i think?
  // if there were no couples, i could link collector person via name?
  // if there were no repeat founders, collector-person would be longer?
  // idk why, but just feels more linkable
  PMDB_founder_person_links [
				label = "PMDB_founder_person_links | <founder_id> founder_id |
				<pmdb_person_id> pmdb_person_id | around 739"]
  
  // this is what has to be manually created, maybe I can use my MOW framework
  // this is what Luisa did 
  PMDB_person_AN_person_links[
				    label = "PMDB_person_AN_person_links |
				    <pmdb_person_id> pmdb_person_id |
				    <an_person_id> an_person_id"]

  AN_time:ID_ACE -> AN_collectors:ID
  // AN_collectors:ID -> AN_person:ID_clctr [dir=back]
  AN_collectors:ID -> AN_collector_persons:ID_ACE
  AN_collector_persons:ID_APE -> AN_person:ID_person
  
  PMDB_museums:founder_id -> PMDB_founders:founder_id
  PMDB_founders:founder_id -> PMDB_founder_person_links:founder_id
  PMDB_founder_person_links:pmdb_person_id -> PMDB_persons:pmdb_person_id // [dir=back]

  PMDB_persons:pmdb_person_id -> PMDB_person_AN_person_links:pmdb_person_id
  AN_person:ID_person -> PMDB_person_AN_person_links:an_person_id
  
}
#+end_src

#+RESULTS:
[[file:artnews_data_structure.png]]

[[file:artnews_data_structure.png]]

Tables PMDB_founders, PMDB_persons, AN_collectors and  AN_person were necessary in the process of constructing PDMB_person_AN_person_links, but are not really relevant for merging data. For that, PMDB_founder_person_links and AN_collector_person have all the necessary information by containing both pmdb/artnews_person_id and ID of the corresponding entity (collector entry for Artnews, founder_id for PMDB).



** Global Human Settlement Layer (GHSL)

The GHSL is used to construct the population counts around private museum. It does so by generating a circular buffer around the museum's location, which is matched to the 1km GSHL population raster. Population of matched cells is summed, weighted by percentage of raster overlap for partly matched circle boundary cells. 

** Museums of the World
Museums of the World (MOW) is a database created and (somewhat) maintained by deGruyter. Access was acquired by the UvA library as part of the *Return of the Medici* project in 2021, after which the database was sent by deGruyter in machine-readable format (=MOW2020_Output.xml=, which cannot be shared). Parsing of the XML file is done in python (=mow.py=), which produces three csv files:
- =mow.csv=: the main file with museum information: ID, name, location, opening year, number of branches/staff;
  one line per museum (55k entries)
- =type.csv=: links between museum ID and museum type (e.g. History Museum, Art Museum, Music Museum);
  multiple types are possible, therefore in long format (66k entries)
- =classification.csv=: links between museum ID and content classification (e.g. Art, Painting, Textiles, Agriculture);
  multiple types are possible, therefore in long format (59k entries)

Links between MOW and PMDB are created through manual fuzzy string matching via the consult frameworks of emacs (=match_pmdb_mow.el= provides the function, =mow-museums.el= is the list of MOW museums so that they can be imported into emacs) and R (=match_pmdb_mow.R=, which handles generates the museum entries to check, and also details the post-match checks).

This produces =mow_pmdb_matchres.csv=: a list of PMDB ID and where available, the correponding MOW ID.


** Artfacts
Artfacts is a database of exhibition data constructed at maintained by the Artfacts team, which compiles exhibition data from a number of sources. Access to the artists career data was acquired by the Medici team in 2023. The datasets consists of the entire artist careers of artists born after 1945 with at least 10 exhibitions. The data is organized into four tables: 
- instns: ID, Name, InstitutionType, FoundationYear, City, Country
- exhbs: InstitutionID, Title, BeginDate, EndDate, CityName, CountryName
- people: ID, Name, Surname, BirthYhear, Nationality, Gender, ExhibitionCount
- exhb_ppl_links: ExhibitionID, PeopleID

https://github.com/swhalemwo/pmdata/blob/main/data_sources/artfacts/crawler.pdf

[[file:~/Dropbox/phd/pmdata/data_sources/artfacts/crawler.pdf]]


https://github.com/swhalemwo/pmdata/blob/main/data_sources/artfacts/crawler.png

[[file:~/Dropbox/phd/pmdata/data_sources/artfacts/crawler.png]]




I'm writing a github readme page as an org-file. i want to link to an image in another folder, so that it appears in the github page (not just as a link). i can link to images in the same folder by just using file:artnews_data_structure.png

pmdata/doc/readme.org
